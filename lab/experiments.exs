#! /usr/bin/env elixir

defmodule Experiments do
  use Bitwise

  def pow(base, exp) when base >= 0 do
    pow(base, exp, 1)
  end

  defp pow(_, 0, _), do: 1

  defp pow(base, 1, res), do: base * res

  defp pow(base, exp, res) do
    res = res * base
    pow(base, exp - 1, res)
  end

  def main do
    # from Python
    two_to_ten_thousand =
      19_950_631_168_807_583_848_837_421_626_835_850_838_234_968_318_861_924_548_520_089_498_529_438_830_221_946_631_919_961_684_036_194_597_899_331_129_423_209_124_271_556_491_349_413_781_117_593_785_932_096_323_957_855_730_046_793_794_526_765_246_551_266_059_895_520_550_086_918_193_311_542_508_608_460_618_104_685_509_074_866_089_624_888_090_489_894_838_009_253_941_633_257_850_621_568_309_473_902_556_912_388_065_225_096_643_874_441_046_759_871_626_985_453_222_868_538_161_694_315_775_629_640_762_836_880_760_732_228_535_091_641_476_183_956_381_458_969_463_899_410_840_960_536_267_821_064_621_427_333_394_036_525_565_649_530_603_142_680_234_969_400_335_934_316_651_459_297_773_279_665_775_606_172_582_031_407_994_198_179_607_378_245_683_762_280_037_302_885_487_251_900_834_464_581_454_650_557_929_601_414_833_921_615_734_588_139_257_095_379_769_119_277_800_826_957_735_674_444_123_062_018_757_836_325_502_728_323_789_270_710_373_802_866_393_031_428_133_241_401_624_195_671_690_574_061_419_654_342_324_638_801_248_856_147_305_207_431_992_259_611_796_250_130_992_860_241_708_340_807_605_932_320_161_268_492_288_496_255_841_312_844_061_536_738_951_487_114_256_315_111_089_745_514_203_313_820_202_931_640_957_596_464_756_010_405_845_841_566_072_044_962_867_016_515_061_920_631_004_186_422_275_908_670_900_574_606_417_856_951_911_456_055_068_251_250_406_007_519_842_261_898_059_237_118_054_444_788_072_906_395_242_548_339_221_982_707_404_473_162_376_760_846_613_033_778_706_039_803_413_197_133_493_654_622_700_563_169_937_455_508_241_780_972_810_983_291_314_403_571_877_524_768_509_857_276_937_926_433_221_599_399_876_886_660_808_368_837_838_027_643_282_775_172_273_657_572_744_784_112_294_389_733_810_861_607_423_253_291_974_813_120_197_604_178_281_965_697_475_898_164_531_258_434_135_959_862_784_130_128_185_406_283_476_649_088_690_521_047_580_882_615_823_961_985_770_122_407_044_330_583_075_869_039_319_604_603_404_973_156_583_208_672_105_913_300_903_752_823_415_539_745_394_397_715_257_455_290_510_212_310_947_321_610_753_474_825_740_775_273_986_348_298_498_340_756_937_955_646_638_621_874_569_499_279_016_572_103_701_364_433_135_817_214_311_791_398_222_983_845_847_334_440_270_964_182_851_005_072_927_748_364_550_578_634_501_100_852_987_812_389_473_928_699_540_834_346_158_807_043_959_118_985_815_145_779_177_143_619_698_728_131_459_483_783_202_081_474_982_171_858_011_389_071_228_250_905_826_817_436_220_577_475_921_417_653_715_687_725_614_904_582_904_992_461_028_630_081_535_583_308_130_101_987_675_856_234_343_538_955_409_175_623_400_844_887_526_162_643_568_648_833_519_463_720_377_293_240_094_456_246_923_254_350_400_678_027_273_837_755_376_406_726_898_636_241_037_491_410_966_718_557_050_759_098_100_246_789_880_178_271_925_953_381_282_421_954_028_302_759_408_448_955_014_676_668_389_697_996_886_241_636_313_376_393_903_373_455_801_407_636_741_877_711_055_384_225_739_499_110_186_468_219_696_581_651_485_130_494_222_369_947_714_763_069_155_468_217_682_876_200_362_777_257_723_781_365_331_611_196_811_280_792_669_481_887_201_298_643_660_768_551_639_860_534_602_297_871_557_517_947_385_246_369_446_923_087_894_265_948_217_008_051_120_322_365_496_288_169_035_739_121_368_338_393_591_756_418_733_850_510_970_271_613_915_439_590_991_598_154_654_417_336_311_656_936_031_122_249_937_969_999_226_781_732_358_023_111_862_644_575_299_135_758_175_008_199_839_236_284_615_249_881_088_960_232_244_362_173_771_618_086_357_015_468_484_058_622_329_792_853_875_623_486_556_440_536_962_622_018_963_571_028_812_361_567_512_543_338_303_270_029_097_668_650_568_557_157_505_516_727_518_899_194_129_711_337_690_149_916_181_315_171_544_007_728_650_573_189_557_450_920_330_185_304_847_113_818_315_407_324_053_319_038_462_084_036_421_763_703_911_550_639_789_000_742_853_672_196_280_903_477_974_533_320_468_368_795_868_580_237_952_218_629_120_080_742_819_551_317_948_157_624_448_298_518_461_509_704_888_027_274_721_574_688_131_594_750_409_732_115_080_498_190_455_803_416_826_949_787_141_316_063_210_686_391_511_681_774_304_792_596_709_376

    match = pow(2, 10_000) == two_to_ten_thousand

    IO.puts("2^10_000 match = #{match}")

    [0, 1, 100, 1023, 1024]
    |> Enum.each(fn i ->
      my_pow = pow(2, i)
      IO.puts("2^#{i} = #{my_pow}")
      erl_pow = :math.pow(2, i) |> round
      same = my_pow == erl_pow
      IO.puts("\t= #{erl_pow} # #{same}")
    end)
  end
end

Experiments.main()
